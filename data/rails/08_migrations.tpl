<ion-view view-title="08 - Migrations">
<ion-content style="margin:0 12px">
<div class="col-md-7 middle-col">
<h1>Migrations</h1>
<hr>

<p>Rails Migration allows you to use Ruby to define changes to your database schema, making it possible to use a version control system to keep things synchronized with the actual code.</p>
<p>This has many uses, including &#x2212;</p>
<ion-list>
<li><p><b>Teams of developers</b> &#x2212; If one person makes a schema change, the other developers just need to update, and run &quot;rake migrate&quot;.</p></li>
<li><p><b>Production servers</b> &#x2212; Run &quot;rake migrate&quot; when you roll out a new release to bring the database up to date as well.</p></li>
<li><p><b>Multiple machines</b> &#x2212; If you develop on both a desktop and a laptop, or in more than one location, migrations can help you keep them all synchronized.</p></li>
</ion-list>
<h2>What Can Rails Migration Do?</h2>
<ion-list>
<li>create_table(name, options)</li>
<li>drop_table(name)</li>
<li>rename_table(old_name, new_name)</li>
<li>add_column(table_name, column_name, type, options)</li>
<li>rename_column(table_name, column_name, new_column_name)</li>
<li>change_column(table_name, column_name, type, options)</li>
<li>remove_column(table_name, column_name)</li>
<li>add_index(table_name, column_name, index_type)</li>
<li>remove_index(table_name, column_name)</li>
</ion-list>
<p><b>Migrations support all the basic data types</b> &#x2212; The following is the list of data types that migration supports &#x2212;</p>
<ion-list>
<li><p><b>string</b> &#x2212; for small data types such as a title.</p></li>
<li><p><b>text</b> &#x2212; for longer pieces of textual data, such as the description.</p></li>
<li><p><b>integer</b> &#x2212; for whole numbers.</p></li>
<li><p><b>float</b> &#x2212; for decimals.</p></li>
<li><p><b>datetime and timestamp</b> &#x2212; store the date and time into a column.</p></li>
<li><p><b>date and time</b> &#x2212; store either the date only or time only.</p></li>
<li><p><b>binary</b> &#x2212; for storing data such as images, audio, or movies.</p></li>
<li><p><b>Boolean</b> &#x2212; for storing true or false values.</p></li>
</ion-list>
<p><b>Valid column options are</b> &#x2212; The following is the list of valid column options.</p>
<ion-list>
<li><p><b>limit</b> ( :limit =&gt; &#x201C;50&#x201D; )</p></li>
<li><p><b>default</b> (:default =&gt; &#x201C;blah&#x201D; )</p></li>
<li><p><b>null</b> (:null =&gt; false implies <span>NOT NULL</span>)</p></li>
</ion-list>
<p><b>NOTE</b> &#x2212; The activities done by Rails Migration can be done using any front-end GUI or directly on SQL prompt, but Rails Migration makes all those activities very easy.</p>

<h2>Create the Migrations</h2>
<p>Here is the generic syntax for creating a migration &#x2212;</p>
<pre class="result notranslate">
application_dir&gt; rails generate migration table_name
</pre>
<p>This will create the file db/migrate/001_table_name.rb. A migration file contains the basic Ruby syntax that describes the data structure of a database table.</p>
<p><b>NOTE</b> &#x2212; Before running the migration generator, it is recommended to clean the existing migrations generated by model generators.</p>
<p>We will create two migrations corresponding to our three tables &#x2212; <b><i>books and subjects</i></b>.</p>
<p>Books migration should be as follows &#x2212;</p>
<pre class="result notranslate">
tp&gt; cd library
library&gt; rails generate migration books
</pre>

<p>subject migration should be as follows &#x2212;</p>
<pre class="result notranslate">
tp&gt; cd library
library&gt; rails generate migration subjects
</pre>

<p>Notice that you are using lower case for book and subject and plural form while creating migrations. This is a Rails paradigm that you should follow each time you create a Migration.</p>
<h2>Edit the Code</h2>
<p>Go to db/migrate subdirectory of your application and edit each file one by one using any simple text editor.</p>
<p>Modify 001_books.rb as follows &#x2212;</p>
<p>The ID column will be created automatically, so don&apos;t do it here as well.</p>
<pre class="result notranslate">
class Books &lt; ActiveRecord::Migration
   
   def self.up
      create_table :books do |t|
         t.column :title, :string, :limit =&gt; 32, :null =&gt; false
         t.column :price, :float
         t.column :subject_id, :integer
         t.column :description, :text
         t.column :created_at, :timestamp
      end
   end

   def self.down
      drop_table :books
   end
end
</pre>
<p>The method <b>self.up</b> is used when migrating to a new version, <b>self.down</b> is used to roll back any changes if needed. At this moment, the above script will be used to create <b><i>books</i></b> table.</p>
<p>Modify 002_subjects.rb as follows &#x2212;</p>
<pre class="result notranslate">
class Subjects &lt; ActiveRecord::Migration
   def self.up
      
      create_table :subjects do |t|
         t.column :name, :string
      end
	
      Subject.create :name =&gt; &quot;Physics&quot;
      Subject.create :name =&gt; &quot;Mathematics&quot;
      Subject.create :name =&gt; &quot;Chemistry&quot;
      Subject.create :name =&gt; &quot;Psychology&quot;
      Subject.create :name =&gt; &quot;Geography&quot;
   end

   def self.down
      drop_table :subjects
   end
end
</pre>
<p>The above script will be used to create <b><i>subjects</i></b> table and will create five records in the subjects table.</p>
<h2>Run the Migration</h2>
<p>Now that you have created all the required migration files. It is time to execute them against the database. To do this, go to a command prompt and go to the library directory in which the application is located, and then type <b>rake migrate</b> as follows &#x2212;</p>
<pre class="result notranslate">
library&gt; rake db:migrate
</pre>
<p>This will create a &quot;schema_info&quot; table if it doesn&apos;t exist, which tracks the current version of the database - each new migration will be a new version, and any new migrations will be run until your database is at the current version.</p>
<p><b>Rake</b> is a Ruby build program similar to Unix <i>make</i> program that Rails takes advantage of, to simplify the execution of complex tasks such as updating a database&apos;s structure etc.</p>
<h2>Running Migrations for Production and Test Databases</h2>
<p>If you would like to specify what Rails environment to use for the migration, use the RAILS_ENV shell variable.</p>
<p>For example &#x2212;</p>
<pre class="result notranslate">
library&gt; export RAILS_ENV = production
library&gt; rake db:migrate
library&gt; export RAILS_ENV = test
library&gt; rake db:migrate
library&gt; export RAILS_ENV = development
library&gt; rake db:migrate
</pre>
<p><b>NOTE</b> &#x2212; In Windows, use &quot;set RAILS_ENV = production&quot; instead of <i>export</i> command.</p>
<h2>What is Next?</h2>
<p>Now we have our database and the required tables available. In the two subsequent chapters, we will explore two important components called Controller (ActionController) and View (ActionView).</p>
<ion-list>
<li>Creating Controllers (Action Controller).</li>
<li>Creating Views (Action View).</li>
</ion-list>
</div>
</ion-content>
</ion-view>